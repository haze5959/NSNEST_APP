{"version":3,"file":"throwIfEmpty.js","sourceRoot":"","sources":["../../src/operators/throwIfEmpty.ts"],"names":[],"mappings":";AAAA,oBAAoB,OAAO,CAAC,CAAA;AAC5B,2BAA2B,oBAAoB,CAAC,CAAA;AAGhD,sCAAsC;AAEtC;;;;;;;;;;;;;;;;;;;;;;GAsBG;AACU,oBAAY,GACvB,UAAI,YAA+C;IAA/C,4BAA+C,GAA/C,kCAA+C;IAAK,OAAA,SAAG,CAAI;QAC7D,QAAQ,EAAE,KAAK;QACf,IAAI,gBAAc,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,CAAC,CAAC;QACzC,QAAQ;YACN,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACnB,MAAM,YAAY,EAAE,CAAC;YACvB,CAAC;QACH,CAAC;KACK,CAAC;AAR+C,CAQ/C,CAAC;AAEZ;IACE,MAAM,CAAC,IAAI,uBAAU,EAAE,CAAC;AAC1B,CAAC;AAFe,2BAAmB,sBAElC,CAAA","sourcesContent":["import { tap } from './tap';\nimport { EmptyError } from '../util/EmptyError';\n/* tslint:disable:no-unused-variable */\nimport { Observable } from '../Observable';\n/* tslint:enable:no-unused-variable */\n\n/**\n * If the source observable completes without emitting a value, it will emit\n * an error. The error will be created at that time by the optional\n * `errorFactory` argument, otherwise, the error will be {@link ErrorEmpty}.\n *\n * @example\n *\n * const click$ = fromEvent(button, 'click');\n *\n * clicks$.pipe(\n *   takeUntil(timer(1000)),\n *   throwIfEmpty(\n *     () => new Error('the button was not clicked within 1 second')\n *   ),\n * )\n * .subscribe({\n *   next() { console.log('The button was clicked'); },\n *   error(err) { console.error(err); },\n * });\n * @param {Function} [errorFactory] A factory function called to produce the\n * error to be thrown when the source observable completes without emitting a\n * value.\n */\nexport const throwIfEmpty =\n  <T>(errorFactory: (() => any) = defaultErrorFactory) => tap<T>({\n    hasValue: false,\n    next(this: any) { this.hasValue = true; },\n    complete(this: any) {\n      if (!this.hasValue) {\n        throw errorFactory();\n      }\n    }\n  } as any);\n\nexport function defaultErrorFactory() {\n  return new EmptyError();\n}\n"]}