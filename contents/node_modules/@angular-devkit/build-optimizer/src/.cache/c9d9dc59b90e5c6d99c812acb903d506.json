{"remainingRequest":"/Users/kwon-ogyu/Desktop/GitHub/NSNEST_APP/contents/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/kwon-ogyu/Desktop/GitHub/NSNEST_APP/contents/node_modules/angular2-infinite-scroll/src/position-resolver.js","dependencies":[{"path":"/Users/kwon-ogyu/Desktop/GitHub/NSNEST_APP/contents/node_modules/angular2-infinite-scroll/src/position-resolver.js","mtime":1529368843464},{"path":"/Users/kwon-ogyu/Desktop/GitHub/NSNEST_APP/contents/node_modules/cache-loader/dist/cjs.js","mtime":1529368844425},{"path":"/Users/kwon-ogyu/Desktop/GitHub/NSNEST_APP/contents/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529368835953}],"contextDependencies":[],"result":["\"use strict\";\nvar core_1 = require('@angular/core');\nvar axis_resolver_1 = require('./axis-resolver');\nvar PositionResolverFactory = /*@__PURE__*/ (function () {\n    function PositionResolverFactory(axisResolver) {\n        this.axisResolver = axisResolver;\n    }\n    PositionResolverFactory.prototype.create = function (options) {\n        return new PositionResolver(this.axisResolver.create(!options.horizontal), options);\n    };\n    PositionResolverFactory.decorators = [\n        { type: core_1.Injectable },\n    ];\n    return PositionResolverFactory;\n}());\nexports.PositionResolverFactory = PositionResolverFactory;\nvar PositionResolver = /*@__PURE__*/ (function () {\n    function PositionResolver(axis, options) {\n        this.axis = axis;\n        this.options = options;\n        this.resolveContainer(this.options.windowElement);\n        this.defineContainer(this.options.windowElement);\n    }\n    PositionResolver.prototype.defineContainer = function (windowElement) {\n        if (this.resolveContainer(windowElement) || !windowElement.nativeElement) {\n            this.container = windowElement;\n        }\n        else {\n            this.container = windowElement.nativeElement;\n        }\n        return this.container;\n    };\n    PositionResolver.prototype.resolveContainer = function (windowElement) {\n        var isContainerWindow = Object.prototype.toString.call(windowElement).includes('Window');\n        this.isContainerWindow = isContainerWindow;\n        return isContainerWindow;\n    };\n    PositionResolver.prototype.getDocumentElement = function () {\n        return this.isContainerWindow\n            ? this.options.windowElement.document.documentElement\n            : null;\n    };\n    PositionResolver.prototype.calculatePoints = function (element) {\n        return this.isContainerWindow\n            ? this.calculatePointsForWindow(element)\n            : this.calculatePointsForElement(element);\n    };\n    PositionResolver.prototype.calculatePointsForWindow = function (element) {\n        // container's height\n        var height = this.height(this.container);\n        // scrolled until now / current y point\n        var scrolledUntilNow = height + this.pageYOffset(this.getDocumentElement());\n        // total height / most bottom y point\n        var totalToScroll = this.offsetTop(element.nativeElement) + this.height(element.nativeElement);\n        return { height: height, scrolledUntilNow: scrolledUntilNow, totalToScroll: totalToScroll };\n    };\n    PositionResolver.prototype.calculatePointsForElement = function (element) {\n        var scrollTop = this.axis.scrollTopKey();\n        var scrollHeight = this.axis.scrollHeightKey();\n        var container = this.container;\n        var height = this.height(container);\n        // perhaps use this.container.offsetTop instead of 'scrollTop'\n        var scrolledUntilNow = container[scrollTop];\n        var containerTopOffset = 0;\n        var offsetTop = this.offsetTop(container);\n        if (offsetTop !== void 0) {\n            containerTopOffset = offsetTop;\n        }\n        var totalToScroll = container[scrollHeight];\n        return { height: height, scrolledUntilNow: scrolledUntilNow, totalToScroll: totalToScroll };\n    };\n    PositionResolver.prototype.height = function (elem) {\n        var offsetHeight = this.axis.offsetHeightKey();\n        var clientHeight = this.axis.clientHeightKey();\n        // elem = elem.nativeElement;\n        if (isNaN(elem[offsetHeight])) {\n            return this.getDocumentElement()[clientHeight];\n        }\n        else {\n            return elem[offsetHeight];\n        }\n    };\n    PositionResolver.prototype.offsetTop = function (elem) {\n        var top = this.axis.topKey();\n        // elem = elem.nativeElement;\n        if (!elem.getBoundingClientRect) {\n            return;\n        }\n        return elem.getBoundingClientRect()[top] + this.pageYOffset(elem);\n    };\n    PositionResolver.prototype.pageYOffset = function (elem) {\n        var pageYOffset = this.axis.pageYOffsetKey();\n        var scrollTop = this.axis.scrollTopKey();\n        var offsetTop = this.axis.offsetTopKey();\n        // elem = elem.nativeElement;\n        if (isNaN(window[pageYOffset])) {\n            return this.getDocumentElement()[scrollTop];\n        }\n        else if (elem.ownerDocument) {\n            return elem.ownerDocument.defaultView[pageYOffset];\n        }\n        else {\n            return elem[offsetTop];\n        }\n    };\n    return PositionResolver;\n}());\nexports.PositionResolver = PositionResolver;\n",null]}