{"remainingRequest":"/Users/ogkwon/Desktop/NSNEST/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/ogkwon/Desktop/NSNEST/node_modules/angular2-infinite-scroll/src/infinite-scroll.js","dependencies":[{"path":"/Users/ogkwon/Desktop/NSNEST/node_modules/angular2-infinite-scroll/src/infinite-scroll.js","mtime":1493131086000},{"path":"/Users/ogkwon/Desktop/NSNEST/node_modules/cache-loader/dist/cjs.js","mtime":1529064651365},{"path":"/Users/ogkwon/Desktop/NSNEST/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["\"use strict\";\nvar core_1 = require('@angular/core');\nvar position_resolver_1 = require('./position-resolver');\nvar scroll_register_1 = require('./scroll-register');\nvar scroll_resolver_1 = require('./scroll-resolver');\nvar InfiniteScroll = /*@__PURE__*/ (function () {\n    function InfiniteScroll(element, zone, positionResolverFactory, scrollRegister, scrollerResolver) {\n        this.element = element;\n        this.zone = zone;\n        this.positionResolverFactory = positionResolverFactory;\n        this.scrollRegister = scrollRegister;\n        this.scrollerResolver = scrollerResolver;\n        this.scrolled = new core_1.EventEmitter();\n        this.scrolledUp = new core_1.EventEmitter();\n        this._distanceDown = 2;\n        this._distanceUp = 1.5;\n        this._throttle = 300;\n        this._disabled = false;\n        this._container = null;\n        this.scrollWindow = true;\n        this._immediate = false;\n        this._horizontal = false;\n        this._alwaysCallback = false;\n        this.throttleType = 'throttle';\n    }\n    Object.defineProperty(InfiniteScroll.prototype, \"debounce\", {\n        set: function (value) {\n            this.throttleType = value === '' || !!value ? 'debounce' : 'throttle';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    InfiniteScroll.prototype.ngOnInit = function () {\n        var _this = this;\n        if (typeof window !== 'undefined') {\n            var containerElement = this.resolveContainerElement();\n            var positionResolver_1 = this.positionResolverFactory.create({\n                windowElement: containerElement,\n                horizontal: this._horizontal\n            });\n            var options = {\n                container: positionResolver_1.container,\n                throttleType: this.throttleType,\n                throttleDuration: this._throttle,\n                filterBefore: function () { return !_this._disabled; },\n                mergeMap: function () { return positionResolver_1.calculatePoints(_this.element); },\n                scrollHandler: function (container) { return _this.handleOnScroll(container); }\n            };\n            this.disposeScroller = this.scrollRegister.attachEvent(options);\n        }\n    };\n    InfiniteScroll.prototype.handleOnScroll = function (container) {\n        var scrollResolverConfig = {\n            distance: {\n                down: this._distanceDown,\n                up: this._distanceUp\n            }\n        };\n        var scrollStats = this.scrollerResolver.getScrollStats(container, scrollResolverConfig);\n        if (this.shouldTriggerEvents(scrollStats.shouldScroll)) {\n            var infiniteScrollEvent = {\n                currentScrollPosition: container.scrolledUntilNow\n            };\n            if (scrollStats.isScrollingDown) {\n                this.onScrollDown(infiniteScrollEvent);\n            }\n            else {\n                this.onScrollUp(infiniteScrollEvent);\n            }\n        }\n    };\n    InfiniteScroll.prototype.shouldTriggerEvents = function (shouldScroll) {\n        return (this._alwaysCallback || shouldScroll) && !this._disabled;\n    };\n    InfiniteScroll.prototype.ngOnDestroy = function () {\n        if (this.disposeScroller) {\n            this.disposeScroller.unsubscribe();\n        }\n    };\n    InfiniteScroll.prototype.onScrollDown = function (data) {\n        var _this = this;\n        if (data === void 0) {\n            data = { currentScrollPosition: 0 };\n        }\n        this.zone.run(function () { return _this.scrolled.emit(data); });\n    };\n    InfiniteScroll.prototype.onScrollUp = function (data) {\n        var _this = this;\n        if (data === void 0) {\n            data = { currentScrollPosition: 0 };\n        }\n        this.zone.run(function () { return _this.scrolledUp.emit(data); });\n    };\n    InfiniteScroll.prototype.resolveContainerElement = function () {\n        if (this._container) {\n            return typeof (this._container) === 'string' ? window.document.querySelector(this._container) : this._container;\n        }\n        else {\n            return this.scrollWindow ? window : this.element;\n        }\n    };\n    InfiniteScroll.decorators = [\n        { type: core_1.Directive, args: [{\n                    selector: '[infinite-scroll]'\n                },] },\n    ];\n    InfiniteScroll.propDecorators = {\n        'scrolled': [{ type: core_1.Output },],\n        'scrolledUp': [{ type: core_1.Output },],\n        '_distanceDown': [{ type: core_1.Input, args: ['infiniteScrollDistance',] },],\n        '_distanceUp': [{ type: core_1.Input, args: ['infiniteScrollUpDistance',] },],\n        '_throttle': [{ type: core_1.Input, args: ['infiniteScrollThrottle',] },],\n        '_disabled': [{ type: core_1.Input, args: ['infiniteScrollDisabled',] },],\n        '_container': [{ type: core_1.Input, args: ['infiniteScrollContainer',] },],\n        'scrollWindow': [{ type: core_1.Input, args: ['scrollWindow',] },],\n        '_immediate': [{ type: core_1.Input, args: ['immediateCheck',] },],\n        '_horizontal': [{ type: core_1.Input, args: ['horizontal',] },],\n        '_alwaysCallback': [{ type: core_1.Input, args: ['alwaysCallback',] },],\n        'debounce': [{ type: core_1.Input },],\n    };\n    return InfiniteScroll;\n}());\nexports.InfiniteScroll = InfiniteScroll;\n",null]}