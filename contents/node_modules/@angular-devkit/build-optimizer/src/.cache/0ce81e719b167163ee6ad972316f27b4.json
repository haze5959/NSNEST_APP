{"remainingRequest":"/Users/kwon-ogyu/Desktop/GitHub/NSNEST_APP/contents/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/kwon-ogyu/Desktop/GitHub/NSNEST_APP/contents/node_modules/angular2-infinite-scroll/src/scroll-resolver.js","dependencies":[{"path":"/Users/kwon-ogyu/Desktop/GitHub/NSNEST_APP/contents/node_modules/angular2-infinite-scroll/src/scroll-resolver.js","mtime":1529368843467},{"path":"/Users/kwon-ogyu/Desktop/GitHub/NSNEST_APP/contents/node_modules/cache-loader/dist/cjs.js","mtime":1529368844425},{"path":"/Users/kwon-ogyu/Desktop/GitHub/NSNEST_APP/contents/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529368835953}],"contextDependencies":[],"result":["\"use strict\";\nvar core_1 = require('@angular/core');\nvar ScrollResolver = /*@__PURE__*/ (function () {\n    function ScrollResolver() {\n        this.lastScrollPosition = 0;\n    }\n    ScrollResolver.prototype.shouldScroll = function (container, config, scrollingDown) {\n        var distance = config.distance;\n        var remaining;\n        var containerBreakpoint;\n        if (scrollingDown) {\n            remaining = container.totalToScroll - container.scrolledUntilNow;\n            containerBreakpoint = container.height * distance.down + 1;\n        }\n        else {\n            remaining = container.scrolledUntilNow;\n            containerBreakpoint = container.height * distance.up + 1;\n        }\n        var shouldScroll = remaining <= containerBreakpoint;\n        this.lastScrollPosition = container.scrolledUntilNow;\n        return shouldScroll;\n    };\n    ScrollResolver.prototype.isScrollingDown = function (container) {\n        return this.lastScrollPosition < container.scrolledUntilNow;\n    };\n    ScrollResolver.prototype.getScrollStats = function (container, config) {\n        var isScrollingDown = this.isScrollingDown(container);\n        var shouldScroll = this.shouldScroll(container, config, isScrollingDown);\n        return { isScrollingDown: isScrollingDown, shouldScroll: shouldScroll };\n    };\n    ScrollResolver.decorators = [\n        { type: core_1.Injectable },\n    ];\n    return ScrollResolver;\n}());\nexports.ScrollResolver = ScrollResolver;\n",null]}